syntax = "proto3";
package lucy;
option go_package = "github.com/peake100/lucy-go/lucy";

import "cereal_proto/uuid.proto";
import "google/protobuf/any.proto";
import "lucy_proto/jobs.proto";

// Job is a series of JobStage values that together make up a single pipeline of work
// to be sequentially executed.
message NewJob {
  // type is the human readable value that uniquely identifies this type of job for
  // workers to filter by.
  // @inject_tag: bson:"type"
  string type = 1;

  // name is the human-readable name of the job.
  // @inject_tag: bson:"name"
  string name = 2;

  // description is a human-readable description of the job stage.
  // @inject_tag: bson:"description"
  string description = 3;

  // input contains all the settings and data necessary for workers to complete the job.
  // @inject_tag: bson:"input"
  google.protobuf.Any input = 4;

  // max_retries is the maximum number of times this job can be retried. If 0, no
  // retries are allowed. Unbounded retries are currently unsupported.
  // @inject_tag: bson:"max_retries"
  uint32 max_retries = 5;

  // stages contains all the stages of the job.
  // @inject_tag: bson:"stages"
  repeated JobStage stages = 6;
}

// NewJobs holds a list of new jobs to create in a batch.
message NewJobs{
  // batch is the id of the batch to add these jobs to.
  // @inject_tag: bson:"batch"
  cereal.UUID batch = 1;

  // jobs is the list of new jobs to insert into the batch.
  repeated NewJob jobs = 2;
}

// CreatedJobs returns information about newly created jobs.
message CreatedJobs {
  // ids is a list of job uuids in the same order as the new posted jobs.
  repeated cereal.UUID ids = 1;
}

// Batch is a collection of Job values that are tied together as a collection of work.
// Jobs contained within a batch are safe to concurrently execute.
message NewBatch {
  // type is the human readable value that uniquely identifies this type of job for
  // workers to filter by. All jobs added to this batch must match the type.
  // @inject_tag: bson:"type"
  string type = 1;

  // name is the human-readable name of the batch.
  // @inject_tag: bson:"name"
  string name = 2;

  // description is the human-readable description of the batch.
  // @inject_tag: bson:"description"
  string description = 3;

  // jobs holds the jobs for the batch. More jobs can be added after-the-fact if
  // desired
  // @inject_tag: bson:"jobs"
  repeated NewJob jobs = 4;
}

// CreatedBatch returns information about a newly created batch.
message CreatedBatch {
  // batch_id is the uuid of the newly created batch
  cereal.UUID batch_id = 1;
  // job_ids are the job uuids of the newly crated jobs, in the same order they were
  // submitted.
  repeated cereal.UUID job_ids = 2;
}
