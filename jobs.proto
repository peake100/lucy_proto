syntax = "proto3";
package lucy;
option go_package = "github.com/peake100/lucy-go/lucy";

import "cereal_proto/uuid.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "grpeakec_proto/pkerr/error.proto";

// Status represent the current state of the job.
enum Status {
  // PENDING - The Job / JobStage is not yet being run.
  PENDING = 0;
  // CANCELLED - The Job has been cancelled.
  CANCELLED = 1;
  // RUNNING - The Job / JobStage is currently being run.
  RUNNING = 2;
  // COMPLETED - The Job / JobStage is complete.
  COMPLETED = 3;
}

// Result details the outcome of a Job / JobStage. This value is made as an enum to
// enable additional future results like "PARTIAL_SUCCESS"
enum Result {
  // NONE indicates that a job does not have a result yet/
  NONE = 0;
  // FAILED indicates that a job failed.
  FAILED = 1;
  // SUCCEEDED indicates that a job was successful.
  SUCCEEDED= 2;
}

// JobStage is one discreet stage of work required to complete a job.
message JobStage {
  // type a human-readable identifier for the stage of work to be created. This value
  // must be unique within a job.
  // @inject_tag: bson:"type"
  string type = 1;

  // description is the human-readable description of the job.
  // @inject_tag: bson:"description"
  string description = 2;

  // Status is the status of the job stage.
  // @inject_tag: bson:"status"
  Status status = 3;

  // run_by is the name of the worker who ran this JobStage.
  // @inject_tag: bson:"run_by"
  string run_by = 4;

  // started is the time the job stage was started.
  // @inject_tag: bson:"started"
  google.protobuf.Timestamp started = 5;

  // completed is the time the job stage was completed.
  // @inject_tag: bson:"completed"
  google.protobuf.Timestamp completed = 6;

  // progress contains the approximate progress of the job from 0.0 - 1.0.
  // @inject_tag: bson:"progress"
  float progress = 7;

  // result is whether the job was successful.
  // @inject_tag: bson:"result"
  Result result = 8;

  // error contains error information about the job stage.
  // @inject_tag: bson:"error"
  pkerr.Error error = 9;

  // result_data contains job completion data from the worker.
  // @inject_tag: bson:"result_data"
  google.protobuf.Any result_data = 10;

  // run_count is the number of times this job stage has been run.
  // @inject_tag: bson:"run_count"
  uint32 run_count = 11;
}

// Job is a series of JobStage values that together make up a single pipeline of work
// to be sequentially executed.
message Job {
  // id is a UUID for the job
  // @inject_tag: bson:"id"
  cereal.UUID id = 1;

  // created is the time the job was created.
  // @inject_tag: bson:"created"
  google.protobuf.Timestamp created = 2;

  // modified is the time the last modification to the job was made.
  // @inject_tag: bson:"modified"
  google.protobuf.Timestamp modified = 3;

  // human readable value that uniquely identifies this type of job for workers to
  // filter by.
  // @inject_tag: bson:"type"
  string type = 4;

  // name is the human-readable name of the job.
  // @inject_tag: bson:"name"
  string name = 5;

  // description is a human-readable description of the job stage.
  // @inject_tag: bson:"description"
  string description = 6;

  // input contains all the settings and data necessary for workers to complete the job.
  // @inject_tag: bson:"input"
  google.protobuf.Any input = 7;

  // max_retries is the maximum number of times this job can be retried. If 0, no
  // retries are allowed. Unbounded retries are currently unsupported.
  // @inject_tag: bson:"max_retries"
  uint32 max_retries = 8;

  // stages contains all the stages of the job.
  // @inject_tag: bson:"stages"
  repeated JobStage stages = 9;

  // status contains the current state of the job.
  // @inject_tag: bson:"status"
  Status status = 10;

  // the total progress of the job from 0.0 - 1.0.
  // @inject_tag: bson:"progress"
  float progress = 11;

  // result contains whether job succeeded or failed.
  // @inject_tag: bson:"result"
  Result result = 12;

  // Runs is the number of times this job has been run.
  // @inject_tag: bson:"run_count"
  uint32 run_count = 13;
}

// Batch is a collection of Job values that are tied together as a collection of work.
// Jobs contained within a batch are safe to concurrently execute.
message Batch {
  // id is a UUID for the job.
  // @inject_tag: bson:"id"
  cereal.UUID id = 1;

  // created is the time the job was created.
  // @inject_tag: bson:"created"
  google.protobuf.Timestamp created = 2;

  // modified is the time the last modification to the job was made.
  // @inject_tag: bson:"modified"
  google.protobuf.Timestamp modified = 3;

  // human readable value that uniquely identifies this type of batch for workers to
  // filter by.
  // @inject_tag: bson:"type"
  string type = 4;

  // name is the human-readable name of the batch.
  // @inject_tag: bson:"name"
  string name = 5;

  // description is the human-readable description of the batch.
  // @inject_tag: bson:"description"
  string description = 6;

  // @inject_tag: bson:"-"
  repeated cereal.UUID jobs = 7;

  // job_count is the number of jobs that are part of this batch.
  // @inject_tag: bson:"job_count"
  uint32 job_count = 8;

  // progress is the total progress on this batch from 0.0 - 1.0.
  // @inject_tag: bson:"progress"
  float progress = 9;

  // pending_count is the number pending jobs in this batch.
  // @inject_tag: bson:"pending_count"
  uint32 pending_count = 10;

  // cancelled_count is the number cancelled jobs in this batch.
  // @inject_tag: bson:"cancelled_count"
  uint32 cancelled_count = 11;

  // running_count is the number running jobs in this batch.
  // @inject_tag: bson:"running_count"
  uint32 running_count = 12;

  // completed_count is the number completed jobs in this batch.
  // @inject_tag: bson:"completed_count"
  uint32 completed_count = 13;

  // success_count is the number of successes this batch
  // @inject_tag: bson:"success_count"
  uint32 success_count = 14;

  // failure count is the number of failures in this batch.
  // @inject_tag: bson:"failure_count"
  uint32 failure_count = 15;
}

// BatchJobs holds the job details for a given batch.
message BatchJobs {
  // jobs is the list og jobs for a batch.
  // @inject_tag: bson:"jobs"
  repeated Job jobs  = 1;
}
